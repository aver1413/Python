from aiogram import types
from create_bot import dp, bot
from keyboards.kb import keyboard
import sqlite3


@dp.message_handler(commands='start')
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, """
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ üòé
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—ã - —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É
–ù–∞—á–Ω–µ–º —Å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
–ß—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá
                           """, reply_markup=keyboard)

    DATABASE_FILE = 'car_info.db'
    conn = sqlite3.connect(DATABASE_FILE)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS car_info (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fullname TEXT,
        username TEXT,
        name TEXT,
        city TEXT,
        car_make TEXT,
        car_model TEXT,
        license_plate TEXT,
        car_photo_front TEXT,
        car_photo_back TEXT,
        sts_front TEXT,
        sts_back TEXT,
        driver_license_front TEXT,
        driver_license_back TEXT
    )
''')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    conn.commit()

# –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()


@dp.message_handler(content_types=types.ContentTypes.CONTACT)
async def handle_contact(message: types.Message):
    contact = message.contact
    if contact:
        phone_number = contact.phone_number
        with open('number.txt', 'w') as file:
            file.write(phone_number)
        await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.")
    


@dp.message_handler(content_types=types.ContentTypes.ANY, run_task=True)
async def check_user(message: types.Message):
    user_id = message.from_user.id
    chat_type = message.chat.type
    if chat_type not in ['group', 'supergroup']:
        return
    with open('ver.txt', 'r') as file:
        verified_users = file.read().splitlines()
    if str(user_id) not in verified_users:
        await message.delete()
        await message.answer(f"–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")

    




