import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, types
from create_bot import dp, bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from time import sleep
import sqlite3


CHANNEL_ID = -1001805352 

# –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
credentials = Credentials.from_service_account_file('hermal-pattern-394314-c98e9373fa4c.json', scopes=['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive'])
client = gspread.authorize(credentials)
spreadsheet = client.open_by_key('')
worksheet = spreadsheet.worksheet('–û–ø—Ä–æ—Å')

# cell_value = worksheet.acell("A1").value


kb_opros_menu = InlineKeyboardMarkup (row_width=1).add(InlineKeyboardButton(text='–û–ø—Ä–æ—Å', callback_data='opros')) \
.add(InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç –Ω–∞ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data='2–∫–∞—Ç–µ–≥–æ—Ä–∏—è')) \





@dp.message_handler(text='üè´–û–±—É—á–µ–Ω–∏–µüè´')
async def opros2(message: types.Message):
    base = sqlite3.connect('main.db')
    cur = base.cursor()
    cur.execute('SELECT USERNAME FROM spec')
    rows = cur.fetchall()
    username_spec = [row[0] for row in rows]
    if message.from_user.username in username_spec:
        await message.delete()
        await bot.send_message(CHANNEL_ID, f'@{message.from_user.username} –ø–µ—Ä–µ—à—ë–ª –≤ "–û–±—É—á–µ–Ω–∏–µ"')
        await bot.send_message(message.from_user.id, f'{message.from_user.first_name}, –≤—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ üòé', reply_markup=kb_opros_menu)
        global id_user
        id_user = message.from_user.id
    else:
        await bot.send_message(message.from_user.id, """–£–≤—ã, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
–î–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ç–∏–º–ª–∏–¥–∞–º:
–ï–≤–≥–µ–Ω–∏–π - @aver1413
–î–º–∏—Ç—Ä–∏–π - @Sselenso
–õ–µ–≤ - @xphmi
""")



@dp.callback_query_handler(text='opros')
async def check_opros(callback : types.CallbackQuery):
    username = callback.from_user.username
    await callback.bot.send_message(CHANNEL_ID, f'@{username} –ø–µ—Ä–µ—à—ë–ª –≤ "–û–ø—Ä–æ—Å"')
    await callback.answer()
    cell_value = worksheet.acell("A2").value
    if cell_value == "TRUE":
        # await bot.send_message(message.from_user.id, "–ü—Ä–æ–π–¥–µ–º –æ–ø—Ä–æ—Å")
        cell_value_link = worksheet.acell("B2").value
        kb_opros = InlineKeyboardMarkup (row_width=1).add(InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', web_app=WebAppInfo(url=f'{cell_value_link}')))
        opr = await bot.send_message(id_user, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_opros)
        sleep(10)
        await bot.delete_message(opr.chat.id, opr.message_id)
    elif cell_value == "FALSE":
        await bot.send_message(id_user, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç üòî")



file_kat = '–¢–µ—Å—Ç –Ω–∞ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏—é SL1.docx'
file_2kat = '–¢–µ—Å—Ç –Ω–∞ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏—é SL2.docx'


@dp.callback_query_handler(text='2–∫–∞—Ç–µ–≥–æ—Ä–∏—è')
async def check_opros(callback : types.CallbackQuery):
    await callback.answer()
    with open(file_kat, 'rb') as document:
        await bot.send_document(id_user, document=document)
    with open(file_2kat, 'rb') as document:
        await bot.send_document(id_user, document=document)





    

