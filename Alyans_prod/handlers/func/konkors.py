import gspread
from google.oauth2.service_account import Credentials
from aiogram import Bot, types
from create_bot import dp, bot
from aiogram.types import ReplyKeyboardRemove
import sqlite3
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards import kb_spec
from time import sleep
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton


CHANNEL_ID = -1001805352641 # –ê–ª—å—è–Ω—Å admin-log


class FSMAdmin(StatesGroup):
    –≤–æ–ø—Ä–æ—Å1 = State()
    –≤–æ–ø—Ä–æ—Å2 = State()
    –≤–æ–ø—Ä–æ—Å3 = State()
    –≤–æ–ø—Ä–æ—Å4 = State()
    –≤–æ–ø—Ä–æ—Å5 = State()
    –≤–æ–ø—Ä–æ—Å6 = State()
    –≤–æ–ø—Ä–æ—Å7 = State()
    –≤–æ–ø—Ä–æ—Å8 = State()
    –≤–æ–ø—Ä–æ—Å9 = State()
    –≤–æ–ø—Ä–æ—Å10 = State()



# –£–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ Google –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –∫–ª—é—á —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
credentials = Credentials.from_service_account_file('hermal-pattern-394314-c98e9373fa4c.json', scopes=['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive'])
client = gspread.authorize(credentials)
spreadsheet = client.open_by_key('')
worksheet = spreadsheet.worksheet('–ê–Ω–µ–∫—Ç—ã')

# cell_value = worksheet.acell("A1").value

spreadsheet1 = client.open_by_key('')
worksheet1 = spreadsheet1.worksheet('–õ–∏—Å—Ç')

async def check_konkurs(message: types.Message):
    cell_value = worksheet1.acell("A2").value
    if cell_value == "TRUE":
        await konkurs(message)
    elif cell_value == "FALSE":
        await bot.send_message(id_user, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∫–æ–Ω–∫—É—Ä—Å –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç üòî")


@dp.message_handler(commands='–∫–æ–Ω–∫—É—Ä—Å')
async def opros2(message: types.Message):
    base = sqlite3.connect('main.db')
    cur = base.cursor()
    cur.execute('SELECT USERNAME FROM spec')
    rows = cur.fetchall()
    username_spec = [row[0] for row in rows]
    if message.from_user.username in username_spec:
        await message.delete()
        global id_user
        id_user = message.from_user.id
        global firstname_user
        firstname_user = message.from_user.first_name
        global username
        username = message.from_user.username
        await check_konkurs(message)
    else:
        await bot.send_message(message.from_user.id, """–£–≤—ã, —É —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É
–î–ª—è –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Ç–∏–º–ª–∏–¥–∞–º:
–ï–≤–≥–µ–Ω–∏–π - @aver1413
–î–º–∏—Ç—Ä–∏–π - @Sselenso
–õ–µ–≤ - @xphmi
""")

kb_check = InlineKeyboardMarkup (row_width=2).add(InlineKeyboardButton(text='–î–∞, —è –≥–æ—Ç–æ–≤', callback_data='–î–∞, —è –≥–æ—Ç–æ–≤')) \
.insert(InlineKeyboardButton(text='–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª', callback_data='–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª'))

async def konkurs(message: types.Message):
     global sms1
     sms1 = await bot.send_message(id_user, f"""
{firstname_user}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å —É—Ç—Ä–µ–Ω–Ω–∏—Ö —á–∞—Ç–µ—Ä–æ–≤ ü•≥""", reply_markup=ReplyKeyboardRemove())
     sleep(2)
     global sms2
     sms2 = await bot.send_message(id_user, """
–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ üëá""")
     sleep(2)
     global sms3
     sms3 = await bot.send_message(id_user, """
–£—Å–ª–æ–≤–∏—è:
1) –£ —Ç–µ–±—è –¥–æ–ª–∂–µ–Ω """, reply_markup=kb_check)
     

@dp.callback_query_handler(text='–ù–µ—Ç, —è –ø–µ—Ä–µ–¥—É–º–∞–ª')
async def check_opros(callback : types.CallbackQuery):
    await callback.answer()
    global chatid
    chatid = callback.message.chat.id
    await no_peredumal(callback)

async def no_peredumal(message: types.Message):
    await bot.send_message(id_user, '–¢–æ–≥–¥–∞ –∑–∞–±—É–¥–µ–º –ø—Ä–æ –≤—Å—ë —ç—Ç–æ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø—Ä–æ—Ç–∏–≤ üòú\n–ó–∞—Ö–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑ ‚û°Ô∏è –≤–≤–µ–¥–∏ /–∫–æ–Ω–∫—É—Ä—Å –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º üòä', reply_markup=kb_spec)
    await bot.delete_message(chat_id=chatid, message_id=sms1.message_id)
    await bot.delete_message(chat_id=chatid, message_id=sms2.message_id)
    await bot.delete_message(chat_id=chatid, message_id=sms3.message_id)
    sleep(10)

    

@dp.callback_query_handler(text='–î–∞, —è –≥–æ—Ç–æ–≤')
async def check_opros(callback : types.CallbackQuery):
    await callback.answer()
    global chatid
    chatid = callback.message.chat.id
    await bot.delete_message(chat_id=chatid, message_id=sms3.message_id)
    await gotov(callback)


async def gotov(message: types.Message, state=None):
    await bot.send_message(id_user, '–í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è (–¢–æ–ª—å–∫–æ –ò–º—è, —Ñ–∞–º–∏–ª–∏—é –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–¥–æ üòÅ)')
    await FSMAdmin.next()


@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å1)
async def v1(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo1
        vo1 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ñ–∞–º–∏–ª–∏—é')


@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å2)
async def v2(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo2
        vo2 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')


@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å3)
async def v3(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo3
        vo3 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '?')

@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å4)
async def v4(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo4
        vo4 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '?')



@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å5)
async def v5(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo5
        vo5 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')



@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å6)
async def v6(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo6
        vo6 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')


@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å7)
async def v7(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo7
        vo7 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')



@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å8)
async def v8(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo8
        vo8 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')


@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å9)
async def v9(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo9
        vo9 = message.text
    await FSMAdmin.next()
    await bot.send_message(id_user, '')

@dp.message_handler(state=FSMAdmin.–≤–æ–ø—Ä–æ—Å10)
async def v9(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['text'] = message.text
        global vo10
        vo10 = message.text
    await state.finish()
    await load223(message)



spreadsheet = client.open_by_key('')
worksheet = spreadsheet.worksheet('–ê–Ω–µ–∫—Ç—ã')


async def load223(message: types.Message):
        all_values = worksheet.get_all_values()
        row_number = len(all_values) + 1
        column_number1 = 1  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number2 = 2  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number3 = 3  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number4 = 4  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number5 = 5  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number6 = 6  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number7 = 7  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number8 = 8  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number9 = 9  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number10 = 10  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        column_number11 = 11  # –ù–æ–º–µ—Ä –∫–æ–ª–æ–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 2 –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ B
        worksheet.update_cell(row_number, column_number1, vo1)
        worksheet.update_cell(row_number, column_number2, vo2)
        worksheet.update_cell(row_number, column_number3, vo3)
        worksheet.update_cell(row_number, column_number4, vo4)
        worksheet.update_cell(row_number, column_number5, vo5)
        worksheet.update_cell(row_number, column_number6, vo6)
        worksheet.update_cell(row_number, column_number7, vo7)
        worksheet.update_cell(row_number, column_number8, vo8)
        worksheet.update_cell(row_number, column_number9, vo9)
        worksheet.update_cell(row_number, column_number10, vo10)
        worksheet.update_cell(row_number, column_number11, username)
        await bot.send_message(id_user, '–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è @aver1413', reply_markup=kb_spec)
        await bot.send_message(CHANNEL_ID, f"""
: {vo1}
: {vo2}
: {vo3}
: {vo4}
: {vo5}
: {vo6}
: {vo7}
: {vo8}
: {vo9}
: {vo10}
: @{username}""")
    
    

